/**
 * –ö–ª–∞—Å—Å, –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * 
 * 
 */
export class Printer {
    constructor(styletext) {
        this.st = styletext
    }

    helpMessageView() {
        console.log(`–ó–Ω–∞—á–∏—Ç —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å... \n —á—Ç–æ—à –¥–∞–≤–∞–π –ø–æ–º–æ–≥–∞—Ç—å \n –µ—Å—Ç—å 4 –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
             \n add - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã`)
    }

    showAllTasksView(array) {
        process.stdout.write('\x1B[?25l')
        console.log(this.st(['bold', 'underline'], 'üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:'));
        if (array.length === 0) {
            console.log(this.st('dim', '  ‚Äî –ó–∞–¥–∞—á –Ω–µ—Ç ‚Äî'));
            return;
        }
        array.forEach((task, index) => {
            const status = task.completed
                ? this.st(['green', 'bold'], '‚úì –°–¥–µ–ª–∞–Ω–æ')
                : this.st(['red', 'bold'], '‚úó –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');

            console.log(
                `  ${this.st(['yellow', 'bold'], `${index + 1}.`)} ${this.st('italic', task.text)}\n` +
                `  ‚îî‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: ${status}\n`
            );
        });
    }
}